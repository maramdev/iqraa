import streamlit as st
from PIL import Image
import base64
import openai
import os
from langchain.document_loaders import WebBaseLoader
from langchain.text_splitter import MarkdownHeaderTextSplitter, RecursiveCharacterTextSplitter
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.vectorstores import Chroma
from langchain.chains import RetrievalQA
from langchain.chat_models import ChatOpenAI
from langchain.memory import ConversationBufferMemory
from langchain.chains import ConversationalRetrievalChain

# تعيين مفتاح API الخاص بـ OpenAI
api_key = os.getenv("OPENAI_API_KEY", "sk-proj-6WpxkivhspjLGtOfyyC5T3BlbkFJHOtGPJDBgQRjIAKD2G6X")
openai.api_key = api_key

# تحميل المستندات
loader = [
    WebBaseLoader("https://www.fakera.com/alghaz/%D8%A3%D8%B3%D8%A6%D9%84%D8%A9-%D8%B9%D9%86-%D8%A7%D9%84%D9%82%D8%B1%D8%A2%D9%86-%D8%A7%D9%84%D9%83%D8%B1%D9%8A%D9%85/"),
    WebBaseLoader("https://www.mstaml.com/sa/post/%D8%A7%D9%84%D8%B3%D8%B9%D9%88%D8%AF%D9%8A%D8%A9/%D9%86%D9%82%D8%A7%D8%B4%D8%A7%D8%AA-%D8%B9%D8%A7%D9%85%D8%A9/%D8%A7%D8%B3%D8%A6%D9%84%D8%A9-%D9%88%D8%A7%D8%AC%D9%88%D8%A8%D8%A9-%D9%81%D9%8A-%D8%A7%D9%84%D9%82%D8%B1%D8%A7%D9%86-%D8%A7%D9%84%D9%83%D8%B1%D9%8A%D9%85?id=98452&location=30&type=10"),
    WebBaseLoader("https://medium.com/@soto3.com/%D8%A7%D8%B3%D8%A6%D9%84%D8%A9-%D8%AF%D9%8A%D9%86%D9%8A%D8%A9-%D8%B9%D9%86-%D8%A7%D9%84%D9%82%D8%B1%D8%A7%D9%86-%D8%A7%D9%84%D9%83%D8%B1%D9%8A%D9%85-%D9%88%D8%A7%D8%AC%D8%A7%D8%A8%D8%A7%D8%AA%D9%87%D8%A7-2024-f100b290ed0b"),
    WebBaseLoader("https://ar.saudi.wiki/%D8%A7%D8%B3%D8%A6%D9%84%D8%A9-%D8%AF%D9%8A%D9%86%D9%8A%D8%A9-%D8%B9%D9%86-%D8%A7%D9%84%D9%82%D8%B1%D8%A2%D9%86-%D8%A7%D9%84%D9%83%D8%B1%D9%8A%D9%85/"),
    WebBaseLoader("https://www.almrsal.com/post/1020022"),
    WebBaseLoader("https://artic.nl7za.com/education2023/religious-questions-from-the-holy-quran/"),
    WebBaseLoader("https://forums.alkafeel.net/node/17115")
]

docs = []
for loaders in loader:
    docs.extend(loaders.load())

txt = ' '.join([d.page_content for d in docs])
headers_to_split_on = [
    ("#", "Header 1"),
    ("##", "Header 2"),
]
markdown_splitter = MarkdownHeaderTextSplitter(headers_to_split_on=headers_to_split_on)
md_header_splits = markdown_splitter.split_text(txt)

text_splitter = RecursiveCharacterTextSplitter(chunk_size=1500, chunk_overlap=150)
splits = text_splitter.split_documents(docs)

persist_directory = 'docs/chroma/'
embedding = OpenAIEmbeddings(api_key=api_key)
vectordb = Chroma.from_documents(documents=splits, embedding=embedding, persist_directory=persist_directory)

llm_name = "gpt-3.5-turbo"
llm = ChatOpenAI(model_name=llm_name, temperature=0, openai_api_key=api_key)
memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)

qa = ConversationalRetrievalChain.from_llm(
    llm,
    retriever=vectordb.as_retriever(),
    memory=memory
)

def get_base64_of_bin_file(bin_file):
    with open(bin_file, 'rb') as f:
        data = f.read()
    return base64.b64encode(data).decode()

def set_background(png_file):
    bin_str = get_base64_of_bin_file(png_file)
    page_bg_img = '''
    <style>
    .stApp {{
        background-image: url("data:image/jpeg;base64,{0}");
        background-size: cover;
    }}
    </style>
    '''.format(bin_str)
    st.markdown(page_bg_img, unsafe_allow_html=True)

def get_image_base64(img_path):
    with open(img_path, "rb") as img_file:
        return base64.b64encode(img_file.read()).decode()

# تعيين خلفية الصفحة
background_path = "C:/Users/meem9/Downloads/py.project/Backgraund.jpg"
set_background(background_path)

# الحصول على ترميز Base64 للشعار
logo_path = "C:/Users/meem9/Downloads/py.project/iqraa.logo.png"
logo_base64 = get_image_base64(logo_path)

# تخصيص CSS لتنسيق الصفحة
def add_css():
    st.markdown(f"""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Cairo:wght@600&display=swap');
    .stApp {{
        color: #333;
        font-family: 'Cairo', sans-serif;
    }}
    .navbar {{
        background-color: transparent;
        color: white;
        padding: 10px 20px;
        display: flex;
        justify-content: flex-start;
        align-items: center;
        animation: fadeIn 0.25s ease-out 0s forwards;
        opacity: 0;
        position: fixed;
        top: 30px; /* تعديل الهامش العلوي */
        left: 10px;
    }}
    .navbar .title-container {{
        display: flex;
        align-items: center;
    }}
    .navbar .title-container img {{
        height: 150px; /* تكبير حجم الشعار */
        margin-right: 0px;
    }}
    .content-section {{
        padding: 20px 20px;
        text-align: center;
        background: rgba(255, 255, 255, 0);
        border-radius: 10px;
        margin-top: 200px; /* تعديل الهامش العلوي */
        animation: fadeIn 0.25s ease-out 0.25s forwards;
        opacity: 0;
    }}
    .content-section h1 {{
        font-size: 48px;
        margin-bottom: 10px;
        color: #4E342E;
        animation: slideIn 0.25s ease-out 0.25s forwards;
        opacity: 0;
    }}
    .content-section p {{
        font-size: 24px;
        color: #4E342E;
        animation: slideIn 0.25s ease-out 0.25s forwards;
        opacity: 0;
    }}
    .content-section p + p {{
        margin-top: 20px;
    }}
    .next-button {{
        display: flex;
        justify-content: flex-end;
        margin-top: 20px;
        animation: slideInButton 0.25s ease-out 0.5s forwards;
        opacity: 0;
        position: fixed;
        bottom: 20px;
        right: 20px;
    }}
    .next-button button {{
        background-color: #8B4513;
        color: white;
        border: none;
        padding: 15px 30px;
        font-size: 18px;
        cursor: pointer;
        border-radius: 8px;
        transition: background-color 0.3s, transform 0.3s;
    }}
    .next-button button:hover {{
        background-color: #5D3A1A;
        transform: scale(1.1);
    }}
    .back-button {{
        display: flex;
        justify-content: flex-start;
        margin-top: 20px;
        animation: slideInButton 0.25s ease-out 0.5s forwards;
        opacity: 0;
        position: fixed;
        bottom: 20px;
        left: 20px;
    }}
    .back-button button {{
        background-color: #8B4513;
        color: white;
        border: none;
        padding: 15px 30px;
        font-size: 18px;
        cursor: pointer;
        border-radius: 8px;
        transition: background-color 0.3s, transform 0.3s;
    }}
    .back-button button:hover {{
        background-color: #5D3A1A;
        transform: scale(1.1);
    }}
    .stTextInput input {{
        background-color: #D3D3D3;
        color: black;
    }}
    .stButton button {{
        background-color: #D3D3D3;
        color: black;
    }}
    @keyframes fadeIn {{
        from {{ opacity: 0; }}
        to {{ opacity: 1; }}
    }}
    @keyframes slideIn {{
        from {{ transform: translateY(50px); opacity: 0; }}
        to {{ transform: translateY(0); opacity: 1; }}
    }}
    @keyframes slideInButton {{
        from {{ transform: translateY(50px); opacity: 0; }}
        to {{ transform: translateY(0); opacity: 1; }}
    }}
    </style>
    """, unsafe_allow_html=True)

# بدء الجلسة
if 'page' not in st.session_state:
    st.session_state.page = 'الصفحة الرئيسية'

def main():
    # عرض الصفحات بناءً على حالة الجلسة
    if st.session_state.page == 'الصفحة الرئيسية':
        home_page()
    elif st.session_state.page == 'نشر النموذج':
        deploy_page()
    elif st.session_state.page == 'Chatbot':
        chatbot_page()

def home_page():
    add_css()
    
    # شريط التنقل العلوي
    st.markdown(f"""
        <div class='navbar'>
            <div class='title-container'>
                <img src='data:image/jpeg;base64,{logo_base64}' alt='Logo'>
            </div>
        </div>
        """, unsafe_allow_html=True)

    # نبذة عن Iqraa
    st.markdown("""
        <div class='content-section'>
            <h1>Welcome to Iqraa</h1>
            <p>
                Iqraa is your AI-powered assistant for correcting your recitation mistakes while reading the Quran.
            </p>
            <p>
                Our goal is to help you improve your recitation skills with real-time feedback and guidance.
            </p>
        </div>
        """, unsafe_allow_html=True)

    # زر "Next"
    if st.button("Next", key="next_button"):
        st.session_state.page = 'نشر النموذج'
        st.experimental_rerun()

def deploy_page():
    add_css()
    
    # شريط التنقل العلوي
    st.markdown(f"""
        <div class='navbar'>
            <div class='title-container'>
                <img src='data:image/jpeg;base64,{logo_base64}' alt='Logo'>
            </div>
        </div>
        """, unsafe_allow_html=True)

    # عرض معلومات عن نشر النموذج
    st.markdown("""
        <div class='content-section'>
            <h1>نشر النموذج</h1>
            <p>
                هنا يمكنك نشر النموذج الخاص بك والعمل على تحسينه.
            </p>
        </div>
    """, unsafe_allow_html=True)

    # زر "Next"
    if st.button("Next", key="next_button"):
        st.session_state.page = 'Chatbot'
        st.experimental_rerun()

    # زر "Back"
    if st.button("Back", key="back_button"):
        st.session_state.page = 'الصفحة الرئيسية'
        st.experimental_rerun()

def chatbot_page():
    add_css()

    st.markdown("""
        <div class='content-section'>
            <h1>مستشار القرآن الكريم</h1>
            <p>
                اطرح سؤالك حول القرآن الكريم وستحصل على إجابة فورية.
            </p>
        </div>
    """, unsafe_allow_html=True)

    with st.form(key='question_form'):
        question = st.text_input("اطرح سؤالك حول القرآن الكريم:")
        submit_button = st.form_submit_button(label='Submit')
        
        if submit_button:
            result = qa({"question": question})
            st.write(result['answer'])

    # زر "Back"
    if st.button("Back", key="back_button"):
        st.session_state.page = 'نشر النموذج'
        st.experimental_rerun()

if __name__ == "__main__":
    main()
